package csc2a.pta.model;

import java.util.regex.Pattern;
import java.util.regex.Matcher;
/**
 * Subclass of {@link Anomaly} for Anomalies that have not been scanned.
 * 
 * ONLY EDIT THE VALIDATE METHOD BELOW!
 * 
 * @author Mr. Greaves
 *
 */
public class UnscannedAnomaly extends Anomaly implements IProbable
{
	/** This method takes a string as an argument.
	 *  and returns a boolean value indicating 
	 *  whether the provided string matcher the
	 *  require regular expression
	 * 
	 * @param line a string to do the matching on.
	 * @return bool a true or false value  indicating whether
	 *         a pattern matched or not.
	 */
	public static boolean validate(String line)
	{

		boolean bool = false;

		Pattern pattern = Pattern.compile("[0-9]{3}@[0-9]{3}\\t[A-Z]*\\t[a-z]*");

		Matcher match = pattern.matcher(line);

		if (match.matches()) {
			bool = true;
		}

		return bool;
	}

	/**
	 * DO NOT EDIT THIS FILE BELOW THIS LINE!
	 */

	private final String estimation;

	/**
	 * Create a new UnscannedAnomaly instance.
	 * 
	 * @param x
	 *          X position of the UnscannedAnomaly
	 * @param y
	 *          Y position of the UnscannedAnomaly
	 * @param type
	 *          Anomaly type of the UnscannedAnomaly
	 * @param estimation
	 *          Textual estimation of UnscannedAnomaly
	 */
	public UnscannedAnomaly(int x, int y, EAnomalyType type, String estimation)
	{
		super(x, y, type);
		this.estimation = estimation;
	}

	/**
	 * Accept a visitor
	 */
	@Override
	public void accept(IProbeVisitor visitor)
	{
		visitor.probe(this);
	}

	/**
	 * Return a String representation of the current instance
	 */
	@Override
	public String toString()
	{
		// X_LOCATION@Y_LOCATION ANOMALY_TYPE ESTIMATED_SCALE
		return String.format("%d@%d\t%s\t%s", getLocation().getX(), getLocation().getY(), getType(),
				getEstimation());
	}

	/**
	 * Get the estimation of the current instance
	 * 
	 * @return The estimation
	 */
	public String getEstimation()
	{
		return estimation;
	}

}
